name: API Smoke (TarRlteTarService1)
on: { workflow_dispatch: {} }

jobs:
  call-api:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with: { python-version: "3.11" }

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install requests

      - name: Probe areaBasedList1 (httpsâ†’http, key-case both)
        env:
          SERVICE_KEY: ${{ secrets.SERVICE_KEY }}
          MOBILE_OS: ETC
          MOBILE_APP: CI-Smoke
          BASE_YM: "202504"
          AREA_CD: "51"
          SIGNGU_CD: "51130"
        run: |
          python - <<'PY'
          import os, json, requests, pathlib

          svc = (os.environ.get("SERVICE_KEY") or "").strip()
          if not svc:
              raise SystemExit("SERVICE_KEY secret not set")

          HOSTS = [
            "https://apis.data.go.kr",
            "http://apis.data.go.kr",
          ]
          PATH = "/B551011/TarRlteTarService1/areaBasedList1"
          base_params = {
            "MobileOS": os.environ.get("MOBILE_OS", "ETC"),
            "MobileApp": os.environ.get("MOBILE_APP", "CI-Smoke"),
            "_type": "json",
            "baseYm": os.environ.get("BASE_YM", "202504"),
            "areaCd": os.environ.get("AREA_CD", "51"),
            "signguCd": os.environ.get("SIGNGU_CD", "51130"),
            "numOfRows": 5,
            "pageNo": 1,
          }
          headers = {"Accept": "application/json,*/*", "User-Agent": "ci-smoke/1.0"}

          def call(url: str, key_name: str):
            params = dict(base_params)
            if "%" in svc:  # URL-encoded key
              full = f"{url}?{key_name}={svc}"
              return requests.get(full, params=params, timeout=25, headers=headers, allow_redirects=True)
            else:
              params[key_name] = svc
              return requests.get(url, params=params, timeout=25, headers=headers, allow_redirects=True)

          pathlib.Path("out").mkdir(exist_ok=True)
          logs, winner = [], None

          for host in HOSTS:
            url = host + PATH
            for key_name in ("serviceKey","ServiceKey"):
              try:
                r = call(url, key_name)
                logs.append(f"try {url} [{key_name}] -> {r.status_code} {r.headers.get('content-type')}")
                ctype = (r.headers.get("content-type") or "").lower()
                if "json" not in ctype:
                  open("out/last_non_json.txt","w",encoding="utf-8").write(r.text); continue
                data = r.json()
                code = (((data.get("response") or {}).get("header")) or {}).get("resultCode")
                if code == "0000":
                  winner = (url, key_name, data); break
                else:
                  open("out/last_json.json","w",encoding="utf-8").write(json.dumps(data, ensure_ascii=False, indent=2))
              except Exception as e:
                logs.append(f"error {url} [{key_name}]: {e!r}")
                continue
            if winner: break

          open("out/attempts.log","w").write("\n".join(logs))
          if not winner:
            raise SystemExit("No valid JSON with code=0000")

          url, key_name, data = winner
          items = (((data.get("response") or {}).get("body") or {}).get("items") or {}).get("item") or []
          if isinstance(items, dict): items = [items]
          open("out/pois.json","w",encoding="utf-8").write(json.dumps(items, ensure_ascii=False, indent=2))
          open("out/winner.txt","w").write(f"{url} [{key_name}]")
          print("[OK] winner:", url, "count:", len(items))
          PY

      - name: Upload artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: api-smoke-output
          path: out/
