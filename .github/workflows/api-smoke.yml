name: API Smoke (tourapi)

on:
  workflow_dispatch: {}

jobs:
  call-api:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install deps
        run: |
          python -m pip install -U pip
          pip install requests

      - name: Probe endpoints (HTTPS first, then HTTP)
        env:
          SERVICE_KEY: ${{ secrets.SERVICE_KEY }}
        run: |
          python - <<'PY'
          import os, json, requests, pathlib, sys, time
          from requests.exceptions import SSLError, ConnectionError, Timeout

          svc = (os.environ.get("SERVICE_KEY") or "").strip()
          if not svc:
              print("ERROR: SERVICE_KEY secret not set", flush=True)
              sys.exit(1)

          # 후보 경로 (문서/운영 섞여 있을 수 있어 넉넉히)
          PATHS = [
              "KorService1/areaBasedList1",
              "KorService/areaBasedList1",
              "KorService1/areaBasedList",
              "KorService/areaBasedList",
          ]
          # 베이스 호스트
          HTTPS_BASE = "https://apis.data.go.kr/B551011/"
          HTTP_BASE  = "http://apis.data.go.kr/B551011/"

          params_base = dict(
              MobileOS="ETC",
              MobileApp="CI-Smoke",
              _type="json",
              areaCode=1,
              sigunguCode=1,
              listYN="Y",
              arrange="A",
              numOfRows=5,
              pageNo=1,
          )

          hdrs = {
              "Accept": "application/json,*/*",
              "User-Agent": "ci-smoke/1.0",
          }

          pathlib.Path("out").mkdir(exist_ok=True)
          attempts = []
          winner = None

          def try_one(url, add_key_in_params=True):
              """한 URL을 호출하고 결과/로그를 리턴"""
              params = dict(params_base)
              full = url
              if add_key_in_params:
                  params["serviceKey"] = svc
              else:
                  sep = "&" if "?" in url else "?"
                  full = f"{url}{sep}serviceKey={svc}"

              try:
                  r = requests.get(full, params=params, headers=hdrs, timeout=15)
                  attempts.append(f"{full} -> {r.status_code} {r.headers.get('content-type')}")
                  ctype = (r.headers.get("content-type") or "").lower()
                  if "json" not in ctype:
                      open("out/last_non_json.txt","w",encoding="utf-8").write(r.text)
                      return None
                  data = r.json()
                  code = (((data.get("response") or {}).get("header")) or {}).get("resultCode")
                  if code == "0000":
                      return data
                  else:
                      open("out/last_json.json","w",encoding="utf-8").write(json.dumps(data, ensure_ascii=False, indent=2))
                      return None
              except (SSLError, ConnectionError, Timeout) as e:
                  attempts.append(f"{full} !! {type(e).__name__}: {e}")
                  return None

          # 인코딩된 키(% 포함)이면 URL에 직접 붙여준다
          encoded = "%" in svc

          for path in PATHS:
              # 1) HTTPS 시도
              url = HTTPS_BASE + path
              data = try_one(url, add_key_in_params=not encoded)
              if data:
                  winner = (url, data); break

              # 2) HTTPS 실패 시 HTTP 폴백
              url2 = HTTP_BASE + path
              data = try_one(url2, add_key_in_params=not encoded)
              if data:
                  winner = (url2, data); break

          open("out/attempts.log","w",encoding="utf-8").write("\n".join(attempts))

          if not winner:
              print("No candidate returned JSON with resultCode=0000", flush=True)
              # 로그/에러 힌트 남기고 실패 처리
              sys.exit(1)

          url, data = winner
          items = (((data.get("response") or {}).get("body") or {}).get("items") or {}).get("item") or []
          if isinstance(items, dict): items = [items]
          open("out/winner.txt","w",encoding="utf-8").write(url)
          open("out/pois.json","w",encoding="utf-8").write(json.dumps(items, ensure_ascii=False, indent=2))
          print(f"[OK] winner: {url} count={len(items)}", flush=True)
          PY

      - name: Upload artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: smoke-out
          path: out/*
